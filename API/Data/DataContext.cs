using API.Entities;
using Microsoft.EntityFrameworkCore;


namespace API.Data
{
    public class DataContext : DbContext
    {
        // autogenerated with period + space -> generate constructor
        public DataContext(DbContextOptions options) : base(options)
        {   
        }
        // prop tab+tab to autogenerate
        // database for AppUser
        // table name = Users
        public DbSet<AppUser> Users { get; set; }

        public DbSet<UserLike> Likes { get; set; }

        public DbSet<Message> Messages { get; set; }    

        // we override a method inside the DbContext -> OnModelCreating
        protected override void OnModelCreating(ModelBuilder builder)
        {
            // get access to method we're deriving from 
            base.OnModelCreating(builder);

            // we build primary key using both Id's
            builder.Entity<UserLike>()
                .HasKey(k => new {k.SourceUserId, k.LikedUserId});
            
            // configure the relationship 
            builder.Entity<UserLike>()
                .HasOne(s => s.SourceUser)
                .WithMany(l => l.LikedUsers)
                .HasForeignKey(s => s.SourceUserId)
                .OnDelete(DeleteBehavior.Cascade);
            // set DeleteBehavior.NoAction for SQL Server users or else it'll cause a migration error
            
            builder.Entity<UserLike>()
                .HasOne(s => s.LikedUser)
                .WithMany(l => l.LikedByUsers)
                .HasForeignKey(s => s.LikedUserId)
                .OnDelete(DeleteBehavior.Cascade);

            builder.Entity<Message>()
                .HasOne(u => u.Recipient)
                .WithMany(m => m.MessagesReceived)
                .OnDelete(DeleteBehavior.Restrict); // we cannot delete messages if the other party hasn't deleted them themselves
            
            builder.Entity<Message>()
                .HasOne(u => u.Sender)
                .WithMany(m => m.MessagesSent)
                .OnDelete(DeleteBehavior.Restrict);
        }

    }
}